-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.

-- Suppression des tables si elles existent (pour Ã©viter les conflits)
DROP TABLE IF EXISTS ArchiveLocation CASCADE;
DROP TABLE IF EXISTS ArchiveReservation CASCADE;
DROP TABLE IF EXISTS Paiement CASCADE;
DROP TABLE IF EXISTS Location CASCADE;
DROP TABLE IF EXISTS Reservation CASCADE;
DROP TABLE IF EXISTS EmployeRole CASCADE;
DROP TABLE IF EXISTS Role CASCADE;
DROP TABLE IF EXISTS Employe CASCADE;
DROP TABLE IF EXISTS Client CASCADE;
DROP TABLE IF EXISTS Chambre CASCADE;
DROP TABLE IF EXISTS HotelEmails CASCADE;
DROP TABLE IF EXISTS HotelTelephones CASCADE;
DROP TABLE IF EXISTS Hotel CASCADE;
DROP TABLE IF EXISTS ChaineEmails CASCADE;
DROP TABLE IF EXISTS ChaineTelephones CASCADE;
DROP TABLE IF EXISTS ChaineHoteliere CASCADE;

BEGIN;


CREATE TABLE IF NOT EXISTS public.archivelocation
(
    id_archivelocation integer NOT NULL,
    id_location integer NOT NULL,
    CONSTRAINT archivelocation_pkey PRIMARY KEY (id_archivelocation),
    CONSTRAINT archivelocation_id_location_key UNIQUE (id_location)
);

CREATE TABLE IF NOT EXISTS public.archivereservation
(
    id_archivereservation integer NOT NULL,
    id_reservation integer NOT NULL,
    CONSTRAINT archivereservation_pkey PRIMARY KEY (id_archivereservation),
    CONSTRAINT archivereservation_id_reservation_key UNIQUE (id_reservation)
);

CREATE TABLE IF NOT EXISTS public.chainehoteliere
(
    id_chain integer NOT NULL,
    adresse_bureau character varying(255) COLLATE pg_catalog."default" NOT NULL,
    nb_hotels integer,
    email character varying(255) NOT NULL,
    telephone character varying(20) NOT NULL,
    CONSTRAINT chainehoteliere_pkey PRIMARY KEY (id_chain)
);

CREATE TABLE IF NOT EXISTS public.chambre
(
    num_chambre integer NOT NULL,
    prix numeric(10, 2) NOT NULL,
    capacite integer NOT NULL,
    vue character varying(100) COLLATE pg_catalog."default",
    commodite text COLLATE pg_catalog."default",
    extensions_possible boolean,
    dommages text COLLATE pg_catalog."default",
    id_hotel integer NOT NULL,
    CONSTRAINT chambre_pkey PRIMARY KEY (num_chambre)
);

CREATE TABLE IF NOT EXISTS public.client
(
    nas_client character varying(15) COLLATE pg_catalog."default" NOT NULL,
    nom_complet character varying(255) COLLATE pg_catalog."default" NOT NULL,
    adresse character varying(255) COLLATE pg_catalog."default" NOT NULL,
    date_enregistrement date NOT NULL,
    CONSTRAINT client_pkey PRIMARY KEY (nas_client)
);

CREATE TABLE IF NOT EXISTS public.employe
(
    nas_employe character varying(15) COLLATE pg_catalog."default" NOT NULL,
    nom_complet character varying(255) COLLATE pg_catalog."default" NOT NULL,
    adresse character varying(255) COLLATE pg_catalog."default" NOT NULL,
    id_hotel integer NOT NULL,
    CONSTRAINT employe_pkey PRIMARY KEY (nas_employe)
);

CREATE TABLE IF NOT EXISTS public."estAssigne"
(
    nas_employe character varying(15) COLLATE pg_catalog."default" NOT NULL,
    id_role integer NOT NULL,
    CONSTRAINT employerole_pkey PRIMARY KEY (nas_employe, id_role)
);

CREATE TABLE IF NOT EXISTS public.hotel
(
    id_hotel integer NOT NULL,
    adresse character varying(255) COLLATE pg_catalog."default" NOT NULL,
    classement integer,
    nb_chambres integer,
    id_chain integer NOT NULL,
    emails character varying(255) NOT NULL,
    telephones character varying(20) NOT NULL,
    CONSTRAINT hotel_pkey PRIMARY KEY (id_hotel)
);

CREATE TABLE IF NOT EXISTS public.location
(
    id_location integer NOT NULL,
    date_debut date NOT NULL,
    date_fin date NOT NULL,
    nas_employe character varying(15) COLLATE pg_catalog."default" NOT NULL,
    nas_client character varying(15) COLLATE pg_catalog."default" NOT NULL,
    num_chambre integer NOT NULL,
    id_paiement integer NOT NULL,
    CONSTRAINT location_pkey PRIMARY KEY (id_location)
);

CREATE TABLE IF NOT EXISTS public.paiement
(
    id_paiement integer NOT NULL,
    montant numeric(10, 2) NOT NULL,
    date date NOT NULL,
    CONSTRAINT paiement_pkey PRIMARY KEY (id_paiement)
);

CREATE TABLE IF NOT EXISTS public.reservation
(
    id_reservation integer NOT NULL,
    date_debut date NOT NULL,
    date_fin date NOT NULL,
    statut character varying(50) COLLATE pg_catalog."default" NOT NULL,
    nas_client character varying(15) COLLATE pg_catalog."default" NOT NULL,
    num_chambre integer NOT NULL,
    CONSTRAINT reservation_pkey PRIMARY KEY (id_reservation)
);

CREATE TABLE IF NOT EXISTS public.role
(
    id_role integer NOT NULL,
    nom character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT role_pkey PRIMARY KEY (id_role),
    CONSTRAINT role_nom_key UNIQUE (nom)
);

ALTER TABLE IF EXISTS public.archivelocation
    ADD CONSTRAINT archivelocation_id_location_fkey FOREIGN KEY (id_location)
    REFERENCES public.location (id_location) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS archivelocation_id_location_key
    ON public.archivelocation(id_location);


ALTER TABLE IF EXISTS public.archivereservation
    ADD CONSTRAINT archivereservation_id_reservation_fkey FOREIGN KEY (id_reservation)
    REFERENCES public.reservation (id_reservation) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS archivereservation_id_reservation_key
    ON public.archivereservation(id_reservation);


ALTER TABLE IF EXISTS public.chambre
    ADD CONSTRAINT chambre_id_hotel_fkey FOREIGN KEY (id_hotel)
    REFERENCES public.hotel (id_hotel) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_chambre_hotel
    ON public.chambre(id_hotel);


ALTER TABLE IF EXISTS public.employe
    ADD CONSTRAINT employe_id_hotel_fkey FOREIGN KEY (id_hotel)
    REFERENCES public.hotel (id_hotel) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."estAssigne"
    ADD CONSTRAINT employerole_id_role_fkey FOREIGN KEY (id_role)
    REFERENCES public.role (id_role) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."estAssigne"
    ADD CONSTRAINT employerole_nas_employe_fkey FOREIGN KEY (nas_employe)
    REFERENCES public.employe (nas_employe) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.hotel
    ADD CONSTRAINT hotel_id_chain_fkey FOREIGN KEY (id_chain)
    REFERENCES public.chainehoteliere (id_chain) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_hotel_chain
    ON public.hotel(id_chain);


ALTER TABLE IF EXISTS public.location
    ADD CONSTRAINT location_id_paiement_fkey FOREIGN KEY (id_paiement)
    REFERENCES public.paiement (id_paiement) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.location
    ADD CONSTRAINT location_nas_client_fkey FOREIGN KEY (nas_client)
    REFERENCES public.client (nas_client) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_location_client
    ON public.location(nas_client);


ALTER TABLE IF EXISTS public.location
    ADD CONSTRAINT location_nas_employe_fkey FOREIGN KEY (nas_employe)
    REFERENCES public.employe (nas_employe) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.location
    ADD CONSTRAINT location_num_chambre_fkey FOREIGN KEY (num_chambre)
    REFERENCES public.chambre (num_chambre) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.reservation
    ADD CONSTRAINT reservation_nas_client_fkey FOREIGN KEY (nas_client)
    REFERENCES public.client (nas_client) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_reservation_client
    ON public.reservation(nas_client);


ALTER TABLE IF EXISTS public.reservation
    ADD CONSTRAINT reservation_num_chambre_fkey FOREIGN KEY (num_chambre)
    REFERENCES public.chambre (num_chambre) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

END;